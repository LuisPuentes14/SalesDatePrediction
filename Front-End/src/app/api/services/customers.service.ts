/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCustomersCreateOrderPost } from '../fn/customers/api-customers-create-order-post';
import { ApiCustomersCreateOrderPost$Params } from '../fn/customers/api-customers-create-order-post';
import { apiCustomersOrdersByCustomerIdGet$Json } from '../fn/customers/api-customers-orders-by-customer-id-get-json';
import { ApiCustomersOrdersByCustomerIdGet$Json$Params } from '../fn/customers/api-customers-orders-by-customer-id-get-json';
import { apiCustomersOrdersByCustomerIdGet$Plain } from '../fn/customers/api-customers-orders-by-customer-id-get-plain';
import { ApiCustomersOrdersByCustomerIdGet$Plain$Params } from '../fn/customers/api-customers-orders-by-customer-id-get-plain';
import { apiCustomersSalesPredictionGet$Json } from '../fn/customers/api-customers-sales-prediction-get-json';
import { ApiCustomersSalesPredictionGet$Json$Params } from '../fn/customers/api-customers-sales-prediction-get-json';
import { apiCustomersSalesPredictionGet$Plain } from '../fn/customers/api-customers-sales-prediction-get-plain';
import { ApiCustomersSalesPredictionGet$Plain$Params } from '../fn/customers/api-customers-sales-prediction-get-plain';
import { OrderDto } from '../models/order-dto';
import { SalesDatePredictionDto } from '../models/sales-date-prediction-dto';
import { CreateOrderDto } from '../models';

@Injectable({ providedIn: 'root' })
export class CustomersService extends BaseService {
  apiCustomersCreateOrderPost$Json(arg0: { body: CreateOrderDto; }) {
    throw new Error('Method not implemented.');
  }
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCustomersSalesPredictionGet()` */
  static readonly ApiCustomersSalesPredictionGetPath = '/api/Customers/SalesPrediction';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomersSalesPredictionGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersSalesPredictionGet$Plain$Response(params?: ApiCustomersSalesPredictionGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SalesDatePredictionDto>>> {
    return apiCustomersSalesPredictionGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomersSalesPredictionGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersSalesPredictionGet$Plain(params?: ApiCustomersSalesPredictionGet$Plain$Params, context?: HttpContext): Observable<Array<SalesDatePredictionDto>> {
    return this.apiCustomersSalesPredictionGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SalesDatePredictionDto>>): Array<SalesDatePredictionDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomersSalesPredictionGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersSalesPredictionGet$Json$Response(params?: ApiCustomersSalesPredictionGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SalesDatePredictionDto>>> {
    return apiCustomersSalesPredictionGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomersSalesPredictionGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersSalesPredictionGet$Json(params?: ApiCustomersSalesPredictionGet$Json$Params, context?: HttpContext): Observable<Array<SalesDatePredictionDto>> {
    return this.apiCustomersSalesPredictionGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SalesDatePredictionDto>>): Array<SalesDatePredictionDto> => r.body)
    );
  }

  /** Path part for operation `apiCustomersOrdersByCustomerIdGet()` */
  static readonly ApiCustomersOrdersByCustomerIdGetPath = '/api/Customers/OrdersByCustomer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomersOrdersByCustomerIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersOrdersByCustomerIdGet$Plain$Response(params: ApiCustomersOrdersByCustomerIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderDto>>> {
    return apiCustomersOrdersByCustomerIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomersOrdersByCustomerIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersOrdersByCustomerIdGet$Plain(params: ApiCustomersOrdersByCustomerIdGet$Plain$Params, context?: HttpContext): Observable<Array<OrderDto>> {
    return this.apiCustomersOrdersByCustomerIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderDto>>): Array<OrderDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomersOrdersByCustomerIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersOrdersByCustomerIdGet$Json$Response(params: ApiCustomersOrdersByCustomerIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderDto>>> {
    return apiCustomersOrdersByCustomerIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomersOrdersByCustomerIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCustomersOrdersByCustomerIdGet$Json(params: ApiCustomersOrdersByCustomerIdGet$Json$Params, context?: HttpContext): Observable<Array<OrderDto>> {
    return this.apiCustomersOrdersByCustomerIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderDto>>): Array<OrderDto> => r.body)
    );
  }

  /** Path part for operation `apiCustomersCreateOrderPost()` */
  static readonly ApiCustomersCreateOrderPostPath = '/api/Customers/CreateOrder';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCustomersCreateOrderPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCustomersCreateOrderPost$Response(params?: ApiCustomersCreateOrderPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCustomersCreateOrderPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCustomersCreateOrderPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCustomersCreateOrderPost(params?: ApiCustomersCreateOrderPost$Params, context?: HttpContext): Observable<void> {
    return this.apiCustomersCreateOrderPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
